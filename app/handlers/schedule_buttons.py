import logging
from datetime import datetime, timedelta, date
from typing import Dict, List, Tuple
import re
from aiogram import Router, types
from aiogram.utils.keyboard import ReplyKeyboardBuilder

router = Router()
logger = logging.getLogger(__name__)

user_data: Dict[int, Tuple[str, List[dict]]] = {}


def get_schedule_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="üìÖ –°–µ–≥–æ–¥–Ω—è"))
    builder.add(types.KeyboardButton(text="üìÖ –ó–∞–≤—Ç—Ä–∞"))
    builder.add(types.KeyboardButton(text="üìã –í—Å—è –Ω–µ–¥–µ–ª—è"))
    builder.add(types.KeyboardButton(text="üîç –î—Ä—É–≥–∞—è –≥—Ä—É–ø–ø–∞"))
    builder.adjust(3, 1)
    return builder.as_markup(resize_keyboard=True)


def get_week_menu_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="üîé –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è"))
    builder.add(types.KeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è"))
    builder.add(types.KeyboardButton(text="üìö –í—Å—è –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤"))
    builder.add(types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    builder.adjust(3, 1)
    return builder.as_markup(resize_keyboard=True)


def get_day_name(day_offset: int = 0):
    days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    today = datetime.now() + timedelta(days=day_offset)
    return days[today.weekday()]


def filter_lessons_by_day(lessons: List[dict], day_name: str):
    return [lesson for lesson in lessons if lesson.get("day") == day_name]


def _time_to_minutes(time_str: str):
    hours, minutes = map(int, time_str.split(":"))
    return hours * 60 + minutes


def get_current_week_type(start_date: date = date(2025, 9, 1),target_date: date | None = None,):
    d = target_date or date.today()
    weeks_passed = (d - start_date).days // 7
    return "–≤" if weeks_passed % 2 == 0 else "–Ω"


def _norm_week(x: str) -> str:
    x = (x or "").strip().lower()
    return "–≤" if x.startswith("–≤") else ("–Ω" if x.startswith("–Ω") else x)


def filter_by_week(lessons: list[dict], target_date: date | None = None) -> list[dict]:
    wt = get_current_week_type(target_date=target_date)
    return [l for l in lessons if not l.get("week_type") or _norm_week(l.get("week_type")) == wt]


def format_day_schedule(lessons: List[dict], day_name: str, show_week_per_lesson: bool = False):
    if not lessons:
        return f"<b>{day_name}</b>\n\n–ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç\n"

    lessons.sort(key=lambda l: _time_to_minutes(l.get("time", "")))

    if show_week_per_lesson:
        header = f"<b>{day_name}</b>"
    else:
        week = (lessons[0].get("week_type") or "").strip()
        header = f"<b>{day_name} [{week}]</b>" if week else f"<b>{day_name}</b>"

    sep = "‚Äî" * 20
    out = [header, sep]
    for les in lessons:
        time = les.get("time", "") or ""
        week = (les.get("week_type") or "").strip()
        subj = les.get("subject", "") or ""
        ltype = les.get("type", "") or ""
        building = les.get("building", "") or ""
        room1 = les.get("room1", "") or ""
        room2 = les.get("room2", "") or ""
        traw = les.get("teacher", "") or ""

        line_time = f"‚è∞ {time}" + (f" [{week}]" if show_week_per_lesson and week else "")
        line_subject = f"{subj}" if subj else ""
        line_type = f"({ltype})" if ltype else ""

        rooms = ", ".join([x for x in (room1, room2) if x])
        loc_parts = ([building] if building else []) + ([f"<i>–∞—É–¥. {rooms}</i>"] if rooms else [])
        loc = ", ".join(loc_parts)

        clean_t = re.sub(r'[\u00A0\u2000-\u200B]', ' ', traw)
        teachers = [s.strip() for s in re.split(r'[;,]|\s{2,}|\t+', clean_t) if s.strip()]
        teach = ", ".join(teachers)

        line_place = " ‚Äî ".join([loc, teach]) if (loc and teach) else (loc or teach)

        block = "\n".join(x for x in (line_time if time else "", line_subject, line_type, line_place) if x)
        out.append(block)
        out.append(sep)

    return "\n".join(out)


@router.message(lambda m: m.text in [
    "üìÖ –°–µ–≥–æ–¥–Ω—è", "üìÖ –ó–∞–≤—Ç—Ä–∞", "üìã –í—Å—è –Ω–µ–¥–µ–ª—è", "üîç –î—Ä—É–≥–∞—è –≥—Ä—É–ø–ø–∞",
    "üîé –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è", "‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è", "üìö –í—Å—è –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
])
async def handle_schedule_buttons(message: types.Message) -> None:
    user_id = message.from_user.id

    if message.text == "üîç –î—Ä—É–≥–∞—è –≥—Ä—É–ø–ø–∞":
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s: %s", message.from_user.id, message.text)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã:\n–ü—Ä–∏–º–µ—Ä: 09-825, 8251160, 8251",
            reply_markup=types.ReplyKeyboardRemove(),
        )
        return

    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s: %s", message.from_user.id, message.text)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_schedule_keyboard())
        return

    if user_id not in user_data:
        await message.answer(
            "‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–∏—Ç–µ –≥—Ä—É–ø–ø—É:",
            reply_markup=types.ReplyKeyboardRemove(),
        )
        return

    group, lessons = user_data[user_id]

    if message.text == "üìÖ –°–µ–≥–æ–¥–Ω—è":
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s: %s", message.from_user.id, message.text)
        day_name = get_day_name(0)
        day_lessons = filter_lessons_by_day(lessons, day_name)
        day_lessons = filter_by_week(day_lessons, target_date=date.today())
        await message.answer(
            format_day_schedule(day_lessons, day_name),
            parse_mode="HTML", disable_web_page_preview=True
        )

    elif message.text == "üìÖ –ó–∞–≤—Ç—Ä–∞":
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s: %s", message.from_user.id, message.text)
        day_name = get_day_name(1)
        day_lessons = filter_lessons_by_day(lessons, day_name)
        day_lessons = filter_by_week(day_lessons, target_date=date.today() + timedelta(days=1))
        await message.answer(
            format_day_schedule(day_lessons, day_name),
            parse_mode="HTML", disable_web_page_preview=True
        )

    elif message.text == "üìã –í—Å—è –Ω–µ–¥–µ–ª—è":
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s: %s", message.from_user.id, message.text)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä:", reply_markup=get_week_menu_keyboard())

    elif message.text == "üîé –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è":
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s: %s", message.from_user.id, message.text)
        await message.answer(
            f"üìÜ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é</b>\n–ì—Ä—É–ø–ø–∞: <b>{group}</b>",
            parse_mode="HTML", reply_markup=get_week_menu_keyboard()
        )
        days_order = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"]
        for day in days_order:
            day_lessons = filter_lessons_by_day(lessons, day)
            day_lessons = filter_by_week(day_lessons, target_date=date.today())
            day_text = format_day_schedule(day_lessons, day)
            await message.answer(day_text, parse_mode="HTML", disable_web_page_preview=True)

    elif message.text == "‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è":
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s: %s", message.from_user.id, message.text)
        await message.answer(
            f"üìÜ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é</b>\n–ì—Ä—É–ø–ø–∞: <b>{group}</b>",
            parse_mode="HTML", reply_markup=get_week_menu_keyboard()
        )
        days_order = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"]
        target = date.today() + timedelta(days=7)
        for day in days_order:
            day_lessons = filter_lessons_by_day(lessons, day)
            day_lessons = filter_by_week(day_lessons, target_date=target)
            day_text = day_text = format_day_schedule(day_lessons, day)
            await message.answer(day_text, parse_mode="HTML", disable_web_page_preview=True)

    elif message.text == "üìö –í—Å—è –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤":
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s: %s", message.from_user.id, message.text)
        await message.answer(
            f"üìÜ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞)</b>\n–ì—Ä—É–ø–ø–∞: <b>{group}</b>",
            parse_mode="HTML", reply_markup=get_week_menu_keyboard()
        )
        days_order = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"]
        for day in days_order:
            day_lessons = filter_lessons_by_day(lessons, day)
            day_text = format_day_schedule(day_lessons, day, show_week_per_lesson=True)
            await message.answer(day_text, parse_mode="HTML", disable_web_page_preview=True)
