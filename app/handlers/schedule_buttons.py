from aiogram import Router, types
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from datetime import datetime, timedelta
import logging
from typing import Dict, List, Tuple

from app.config import cfg
from app.services.google_csv import find_group_schedule
from app.services.parser import parse_schedule

router = Router()
log = logging.getLogger(__name__)

# –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏ –≥—Ä—É–ø–ø—ã –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
# –§–æ—Ä–º–∞—Ç: {user_id: (group_name, lessons)}
user_data: Dict[int, Tuple[str, List[dict]]] = {}


def get_schedule_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞"""
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="üìÖ –°–µ–≥–æ–¥–Ω—è"))
    builder.add(types.KeyboardButton(text="üìÖ –ó–∞–≤—Ç—Ä–∞"))
    builder.add(types.KeyboardButton(text="üìã –í—Å—è –Ω–µ–¥–µ–ª—è"))
    builder.add(types.KeyboardButton(text="üîç –î—Ä—É–≥–∞—è –≥—Ä—É–ø–ø–∞"))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)


def get_day_name(day_offset: int = 0) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏"""
    days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    today = datetime.now() + timedelta(days=day_offset)
    return days[today.weekday()]


def filter_lessons_by_day(lessons: List[dict], day_name: str) -> List[dict]:
    """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–Ω—è—Ç–∏–π –ø–æ –¥–Ω—é –Ω–µ–¥–µ–ª–∏"""
    return [lesson for lesson in lessons if lesson.get("day") == day_name]


def format_day_schedule(lessons: List[dict], day_name: str, group: str) -> str:
    """–°—Ç–∞—Ä—ã–π –¥–∏–∑–∞–π–Ω –±–µ–∑ —ç–º–æ–¥–∑–∏ –∏ –ª–∏—à–Ω–∏—Ö –æ—Ç—Å—Ç—É–ø–æ–≤"""
    if not lessons:
        return f"<b>{day_name}</b>\n\n–ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç\n"

    lessons.sort(key=lambda x: x.get("time", ""))

    result = f"<b>{day_name}</b>\n\n"
    for lesson in lessons:
        time_ = lesson.get('time', '')
        week = lesson.get('week_type', '')
        subject = lesson.get('subject', '')
        ltype = lesson.get('type', '')
        building = lesson.get('building', '')
        room1 = lesson.get('room1', '')
        room2 = lesson.get('room2', '')
        teacher = lesson.get('teacher', '')

        # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ —ç–º–æ–¥–∑–∏
        line1 = f"<b>{time_} [{week}] {subject}</b>{f' <i>({ltype})</i>' if ltype else ''}"

        loc_parts = []
        if building:
            loc_parts.append(building)
        rooms = ", ".join([x for x in (room1, room2) if x])
        if rooms:
            loc_parts.append(f"–∞—É–¥. {rooms}")

        tail_parts = []
        if loc_parts:
            tail_parts.append(", ".join(loc_parts))
        if teacher:
            tail_parts.append(teacher)

        line2 = " ‚Äî ".join(tail_parts) if tail_parts else ""

        result += line1
        if line2:
            result += f"\n{line2}"
        result += "\n\n"

    return result


@router.message(lambda message: message.text in ["üìÖ –°–µ–≥–æ–¥–Ω—è", "üìÖ –ó–∞–≤—Ç—Ä–∞", "üìã –í—Å—è –Ω–µ–¥–µ–ª—è", "üîç –ù–æ–≤–∞—è –≥—Ä—É–ø–ø–∞"])
async def handle_schedule_buttons(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    user_id = message.from_user.id

    if message.text == "üîç –ù–æ–≤–∞—è –≥—Ä—É–ø–ø–∞":
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã:\n–ü—Ä–∏–º–µ—Ä: 09-825, 8251160, 8251",
            reply_markup=types.ReplyKeyboardRemove()
        )
        return

    if user_id not in user_data:
        await message.answer(
            "‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–∏—Ç–µ –≥—Ä—É–ø–ø—É:",
            reply_markup=types.ReplyKeyboardRemove()
        )
        return

    group, lessons = user_data[user_id]

    if message.text == "üìÖ –°–µ–≥–æ–¥–Ω—è":
        day_name = get_day_name(0)
        day_lessons = filter_lessons_by_day(lessons, day_name)
        response = format_day_schedule(day_lessons, day_name, group)

    elif message.text == "üìÖ –ó–∞–≤—Ç—Ä–∞":
        day_name = get_day_name(1)
        day_lessons = filter_lessons_by_day(lessons, day_name)
        response = format_day_schedule(day_lessons, day_name, group)

    elif message.text == "üìã –í—Å—è –Ω–µ–¥–µ–ª—è":
        response = f"<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é</b>\n–ì—Ä—É–ø–ø–∞: <b>{group}</b>\n\n"
        days_order = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]

        for day in days_order:
            day_lessons = filter_lessons_by_day(lessons, day)
            if day_lessons:
                response += format_day_schedule(day_lessons, day, group)

    await message.answer(response, parse_mode="HTML", disable_web_page_preview=True)