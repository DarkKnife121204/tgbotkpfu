import logging
from datetime import datetime, timedelta, date
from typing import Dict, List, Tuple

from aiogram import Router, types
from aiogram.utils.keyboard import ReplyKeyboardBuilder

router = Router()
logger = logging.getLogger(__name__)

user_data: Dict[int, Tuple[str, List[dict]]] = {}


def get_schedule_keyboard() -> types.ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="üìÖ –°–µ–≥–æ–¥–Ω—è"))
    builder.add(types.KeyboardButton(text="üìÖ –ó–∞–≤—Ç—Ä–∞"))
    builder.add(types.KeyboardButton(text="üìã –í—Å—è –Ω–µ–¥–µ–ª—è"))
    builder.add(types.KeyboardButton(text="üîç –î—Ä—É–≥–∞—è –≥—Ä—É–ø–ø–∞"))
    builder.adjust(3, 1)
    return builder.as_markup(resize_keyboard=True)


def get_week_menu_keyboard() -> types.ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="üîé –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è"))
    builder.add(types.KeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è"))
    builder.add(types.KeyboardButton(text="üìö –í—Å—è –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤"))
    builder.add(types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    builder.adjust(3, 1)
    return builder.as_markup(resize_keyboard=True)


def get_day_name(day_offset: int = 0) -> str:
    days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    today = datetime.now() + timedelta(days=day_offset)
    return days[today.weekday()]


def filter_lessons_by_day(lessons: List[dict], day_name: str) -> List[dict]:
    return [lesson for lesson in lessons if lesson.get("day") == day_name]


def _time_to_minutes(time_str: str) -> int:
    hours, minutes = map(int, time_str.split(":"))
    return hours * 60 + minutes


def get_current_week_type(start_date: date = date(2025, 9, 1)) -> str:
    today = date.today()
    weeks_passed = ((today - start_date).days // 7)
    return "–≤" if weeks_passed % 2 == 0 else "–Ω"


def filter_by_week(lessons: List[dict]) -> List[dict]:
    week_type = get_current_week_type()
    return [
        lesson for lesson in lessons
        if not lesson.get("week_type") or lesson.get("week_type").lower() == week_type
    ]


def format_day_schedule(lessons: List[dict], day_name: str, group: str) -> str:
    if not lessons:
        return f"<b>{day_name}</b>\n\n–ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç\n"

    lessons.sort(key=lambda x: _time_to_minutes(x.get("time", "")))

    result = [f"<b>{day_name}</b>\n"]
    for lesson in lessons:
        time_ = lesson.get("time", "")
        week = lesson.get("week_type", "")
        subject = lesson.get("subject", "")
        ltype = lesson.get("type", "")
        building = lesson.get("building", "")
        room1 = lesson.get("room1", "")
        room2 = lesson.get("room2", "")
        teacher = lesson.get("teacher", "")

        line1 = f"‚è∞ <b>{time_} [{week}] {subject}</b>{f' <i>({ltype})</i>' if ltype else ''}"

        loc_parts = []
        if building:
            loc_parts.append(building)
        rooms = ", ".join([x for x in (room1, room2) if x])
        if rooms:
            loc_parts.append(f"–∞—É–¥. {rooms}")

        tail_parts = []
        if loc_parts:
            tail_parts.append(", ".join(loc_parts))
        if teacher:
            tail_parts.append(teacher)

        line2 = " ‚Äî ".join(tail_parts) if tail_parts else ""

        result.append(line1)
        if line2:
            result.append(line2)
        result.append("")

    return "\n".join(result).strip()


@router.message(lambda m: m.text in [
    "üìÖ –°–µ–≥–æ–¥–Ω—è", "üìÖ –ó–∞–≤—Ç—Ä–∞", "üìã –í—Å—è –Ω–µ–¥–µ–ª—è", "üîç –î—Ä—É–≥–∞—è –≥—Ä—É–ø–ø–∞",
    "üîé –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è", "‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è", "üìö –í—Å—è –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
])
async def handle_schedule_buttons(message: types.Message) -> None:
    user_id = message.from_user.id

    if message.text == "üîç –î—Ä—É–≥–∞—è –≥—Ä—É–ø–ø–∞":
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã:\n–ü—Ä–∏–º–µ—Ä: 09-825, 8251160, 8251",
            reply_markup=types.ReplyKeyboardRemove(),
        )
        return

    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_schedule_keyboard())
        return

    if user_id not in user_data:
        await message.answer(
            "‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–∏—Ç–µ –≥—Ä—É–ø–ø—É:",
            reply_markup=types.ReplyKeyboardRemove(),
        )
        return

    group, lessons = user_data[user_id]

    if message.text == "üìÖ –°–µ–≥–æ–¥–Ω—è":
        day_name = get_day_name(0)
        day_lessons = filter_lessons_by_day(lessons, day_name)
        day_lessons = filter_by_week(day_lessons)
        await message.answer(
            format_day_schedule(day_lessons, day_name, group),
            parse_mode="HTML", disable_web_page_preview=True
        )

    elif message.text == "üìÖ –ó–∞–≤—Ç—Ä–∞":
        day_name = get_day_name(1)
        day_lessons = filter_lessons_by_day(lessons, day_name)
        day_lessons = filter_by_week(day_lessons)
        await message.answer(
            format_day_schedule(day_lessons, day_name, group),
            parse_mode="HTML", disable_web_page_preview=True
        )

    elif message.text == "üìã –í—Å—è –Ω–µ–¥–µ–ª—è":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä:", reply_markup=get_week_menu_keyboard())

    elif message.text == "üîé –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è":
        await message.answer(
            f"üìÜ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é</b>\n–ì—Ä—É–ø–ø–∞: <b>{group}</b>",
            parse_mode="HTML", reply_markup=get_week_menu_keyboard()
        )
        days_order = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"]
        for day in days_order:
            day_lessons = filter_lessons_by_day(lessons, day)
            day_lessons = filter_by_week(day_lessons)
            day_text = format_day_schedule(day_lessons, day, group)
            await message.answer(day_text, parse_mode="HTML", disable_web_page_preview=True)

    elif message.text == "‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è":
        await message.answer(
            f"üìÜ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é</b>\n–ì—Ä—É–ø–ø–∞: <b>{group}</b>",
            parse_mode="HTML", reply_markup=get_week_menu_keyboard()
        )
        days_order = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"]
        next_type = "–Ω" if get_current_week_type() == "–≤" else "–≤"
        for day in days_order:
            day_lessons = filter_lessons_by_day(lessons, day)
            day_lessons = [l for l in day_lessons
                           if not l.get("week_type") or l.get("week_type").lower() == next_type]
            day_text = format_day_schedule(day_lessons, day, group)
            await message.answer(day_text, parse_mode="HTML", disable_web_page_preview=True)

    elif message.text == "üìö –í—Å—è –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤":
        await message.answer(
            f"üìÜ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞)</b>\n–ì—Ä—É–ø–ø–∞: <b>{group}</b>",
            parse_mode="HTML", reply_markup=get_week_menu_keyboard()
        )
        days_order = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"]
        for day in days_order:
            day_lessons = filter_lessons_by_day(lessons, day)
            day_text = format_day_schedule(day_lessons, day, group)
            await message.answer(day_text, parse_mode="HTML", disable_web_page_preview=True)
