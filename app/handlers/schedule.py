from aiogram import Router, types
from aiogram.filters import Command
from collections import defaultdict
import re, html, logging

from app.config import cfg
from app.handlers.schedule_buttons import user_data
from app.services.google_csv import find_group_schedule
from app.services.parser import parse_schedule

router = Router()
log = logging.getLogger(__name__)

DAY_ORDER = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]


def _day_key(d: str) -> int:
    return DAY_ORDER.index(d) if d in DAY_ORDER else len(DAY_ORDER)


_time_re = re.compile(r"(\d{1,2}):(\d{2})")


def _start_minutes(t: str) -> int:
    m = _time_re.search(t or "")
    return int(m.group(1)) * 60 + int(m.group(2)) if m else 10 ** 9


def _norm_group(s: str) -> str:
    return "".join(ch for ch in (s or "") if ch.isdigit())


def _format_lesson(r: dict) -> str:
    """–°—Ç–∞—Ä—ã–π –¥–∏–∑–∞–π–Ω: –∂–∏—Ä–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ + —Ö–≤–æ—Å—Ç –±–µ–∑ —ç–º–æ–¥–∑–∏"""
    time_ = html.escape(r.get("time") or "")
    week = html.escape(r.get("week_type") or "")
    subject = html.escape(r.get("subject") or "")
    ltype = html.escape(r.get("type") or "")
    building = html.escape(r.get("building") or "")
    room1 = html.escape(r.get("room1") or "") if r.get("room1") else ""
    room2 = html.escape(r.get("room2") or "") if r.get("room2") else ""
    teacher = html.escape(r.get("teacher") or "") if r.get("teacher") else ""

    # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: –∂–∏—Ä–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –±–µ–∑ —ç–º–æ–¥–∑–∏
    line1 = f"<b>{time_} [{week}] {subject}</b>{f' <i>({ltype})</i>' if ltype else ''}"

    # –•–≤–æ—Å—Ç —Å –ª–æ–∫–∞—Ü–∏–µ–π –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º
    loc_parts = []
    if building:
        loc_parts.append(building)
    rooms = ", ".join([x for x in (room1, room2) if x])
    if rooms:
        loc_parts.append(f"–∞—É–¥. {rooms}")

    tail_parts = []
    if loc_parts:
        tail_parts.append(", ".join(loc_parts))
    if teacher:
        tail_parts.append(teacher)

    line2 = " ‚Äî ".join(tail_parts) if tail_parts else ""

    return (line1 + ("\n" + line2 if line2 else "")).strip()


async def _send_chunked_html(m: types.Message, text: str):
    LIMIT = 3500
    i, n = 0, len(text)
    while i < n:
        j = text.rfind("\n\n", i, min(i + LIMIT, n))
        if j == -1 or j <= i:
            j = min(i + LIMIT, n)
        part = text[i:j].strip()
        if part:
            await m.answer(part, parse_mode="HTML", disable_web_page_preview=True)
        i = j


@router.message(Command("schedule"))
@router.message(lambda message: message.text and not message.text.startswith('/'))
async def cmd_schedule(m: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /schedule –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –Ω–æ–º–µ—Ä–æ–º –≥—Ä—É–ø–ø—ã
    """
    # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /schedule, –∏–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    if m.text.startswith('/'):
        args = (m.text or "").split(maxsplit=1)[1:]
        if not args:
            await m.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /schedule <–ì—Ä—É–ø–ø–∞>\n–ü—Ä–∏–º–µ—Ä: /schedule 09-825")
            return
        group_input = args[0]
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏)
        group_input = m.text.strip()

    group = _norm_group(group_input)
    if not group:
        await m.answer(
            "–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã. –ü—Ä–∏–º–µ—Ä: 09-825, 8251160, 8251\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–∏—Å–∫–∞
    status_msg = await m.answer(f"üîç –ò—â—É –≥—Ä—É–ø–ø—É {group}...")

    # –ò—â–µ–º –≥—Ä—É–ø–ø—É –≤–æ –≤—Å–µ—Ö GID
    csv_text = await find_group_schedule(cfg.spreadsheet_id, cfg.gids, group)

    if not csv_text:
        await status_msg.edit_text(
            f"‚ùå –ì—Ä—É–ø–ø–∞ <b>{html.escape(group)}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n"
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã."
        )
        return

    try:
        lessons = parse_schedule(csv_text, group)
    except Exception as e:
        log.exception("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã %s", group)
        await status_msg.edit_text(f"‚ñ≤ –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: <code>{html.escape(str(e))}</code>")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä—É–ø–ø—É –ò —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[m.from_user.id] = (group, lessons)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—Ä—Ç–µ–∂ (–≥—Ä—É–ø–ø–∞, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ)

    if not lessons:
        await status_msg.edit_text(
            f"‚ÑπÔ∏è –ì—Ä—É–ø–ø–∞ <b>{html.escape(group)}</b> –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ.\n"
            f"–í–æ–∑–º–æ–∂–Ω–æ, –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π."
        )
        return

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏–µ
    await status_msg.delete()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
    from .schedule_buttons import get_schedule_keyboard

    await m.answer(
        f"‚úÖ –ì—Ä—É–ø–ø–∞ <b>{html.escape(group)}</b> –Ω–∞–π–¥–µ–Ω–∞!\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        parse_mode="HTML",
        reply_markup=get_schedule_keyboard()
    )
