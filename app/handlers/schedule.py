import html
import logging

from aiogram import Router, types
from aiogram.filters import Command

from app.config import cfg
from app.handlers.schedule_buttons import get_schedule_keyboard, user_data
from app.services.google_csv import find_group_schedule
from app.services.parser import parse_schedule

router = Router()
logger = logging.getLogger(__name__)


def _norm_group(s: str) -> str:
    return "".join(ch for ch in (s or "") if ch.isdigit())


@router.message(Command("schedule"))
@router.message(lambda message: message.text and not message.text.startswith("/"))
async def cmd_schedule(message: types.Message) -> None:
    if message.text.startswith("/"):
        args = (message.text or "").split(maxsplit=1)[1:]
        if not args:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /schedule <–ì—Ä—É–ø–ø–∞>\n–ü—Ä–∏–º–µ—Ä: /schedule 09-825")
            return
        group_input = args[0]
    else:
        group_input = message.text.strip()

    group = _norm_group(group_input)
    if not group:
        await message.answer(
            "–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã. –ü—Ä–∏–º–µ—Ä: 09-825, 8251160, 8251\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    status_msg = await message.answer(f"üîç –ò—â—É –≥—Ä—É–ø–ø—É {group}...")

    csv_text = await find_group_schedule(cfg.spreadsheet_id, cfg.gids, group)
    if not csv_text:
        await status_msg.edit_text(
            f"‚ùå –ì—Ä—É–ø–ø–∞ <b>{html.escape(group)}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã.",
            parse_mode="HTML",
        )
        return

    try:
        lessons = parse_schedule(csv_text, group)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã %s", group)
        await status_msg.edit_text(
            f"‚ñ≤ –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: <code>{html.escape(str(e))}</code>",
            parse_mode="HTML",
        )
        return

    user_data[message.from_user.id] = (group, lessons)

    if not lessons:
        await status_msg.edit_text(
            f"‚ÑπÔ∏è –ì—Ä—É–ø–ø–∞ <b>{html.escape(group)}</b> –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ.\n"
            "–í–æ–∑–º–æ–∂–Ω–æ, –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π.",
            parse_mode="HTML",
        )
        return

    await status_msg.delete()

    await message.answer(
        f"‚úÖ –ì—Ä—É–ø–ø–∞ <b>{html.escape(group)}</b> –Ω–∞–π–¥–µ–Ω–∞!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        parse_mode="HTML",
        reply_markup=get_schedule_keyboard(),
    )
