from aiogram import Router, types
from aiogram.filters import Command
from collections import defaultdict
import re, html, logging

from app.config import cfg
from app.services.google_csv import fetch_csv_text
from app.services.parser import parse_schedule

router = Router()
log = logging.getLogger(__name__)

DAY_ORDER = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫","–í—Ç–æ—Ä–Ω–∏–∫","–°—Ä–µ–¥–∞","–ß–µ—Ç–≤–µ—Ä–≥","–ü—è—Ç–Ω–∏—Ü–∞","–°—É–±–±–æ—Ç–∞","–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]

def _day_key(d: str) -> int:
    return DAY_ORDER.index(d) if d in DAY_ORDER else len(DAY_ORDER)

_time_re = re.compile(r"(\d{1,2}):(\d{2})")
def _start_minutes(t: str) -> int:
    m = _time_re.search(t or "")
    return int(m.group(1))*60 + int(m.group(2)) if m else 10**9

def _norm_group(s: str) -> str:
    return "".join(ch for ch in (s or "") if ch.isdigit())

def _format_lesson(r: dict) -> str:
    """–¥–≤—É—Ö—Å—Ç—Ä–æ—á–Ω—ã–π –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: –∂–∏—Ä–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ + —Ö–≤–æ—Å—Ç."""
    time_ = html.escape(r.get("time") or "")
    week = html.escape(r.get("week_type") or "")
    subject = html.escape(r.get("subject") or "")
    ltype = html.escape(r.get("type") or "")
    building = html.escape(r.get("building") or "")
    room1 = html.escape(r.get("room1") or "") if r.get("room1") else ""
    room2 = html.escape(r.get("room2") or "") if r.get("room2") else ""
    teacher = html.escape(r.get("teacher") or "") if r.get("teacher") else ""

    line1 = f"‚è∞ <b>{time_} [{week}] {subject}</b>{f' <i>({ltype})</i>' if ltype else ''}"

    loc_parts = []
    if building: loc_parts.append(building)
    rooms = ", ".join([x for x in (room1, room2) if x])
    if rooms: loc_parts.append(f"–∞—É–¥. {rooms}")
    tail = " ‚Äî ".join([", ".join(loc_parts)] + ([teacher] if teacher else []))
    line2 = tail if tail.strip() else ""

    return (line1 + ("\n" + line2 if line2 else "")).strip()

async def _send_chunked_html(m: types.Message, text: str):
    """–±–µ–∑–æ–ø–∞—Å–Ω–æ —à–ª—ë–º HTML, —Ä–µ–∂–µ–º –ø–æ –ø—É—Å—Ç—ã–º —Å—Ç—Ä–æ–∫–∞–º –µ—Å–ª–∏ > ~3500 –∑–Ω–∞–∫–æ–≤."""
    LIMIT = 3500
    i, n = 0, len(text)
    while i < n:
        j = text.rfind("\n\n", i, min(i + LIMIT, n))
        if j == -1 or j <= i:
            j = min(i + LIMIT, n)
        part = text[i:j].strip()
        if part:
            await m.answer(part, parse_mode="HTML", disable_web_page_preview=True)
        i = j

@router.message(Command("schedule"))
async def cmd_schedule(m: types.Message):
    """
    /schedule <–Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã>
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç 1) —à–∞–ø–∫—É, 2) –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.
    """
    args = (m.text or "").split(maxsplit=1)[1:]
    if not args:
        await m.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /schedule <–≥—Ä—É–ø–ø–∞>\n–ü—Ä–∏–º–µ—Ä: /schedule 8251160")
        return

    group = _norm_group(args[0])
    if not group:
        await m.answer("–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã. –ü—Ä–∏–º–µ—Ä: /schedule 8251160")
        return

    csv_text = await fetch_csv_text(cfg.spreadsheet_id, cfg.gid)
    if not csv_text:
        await m.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É.")
        return

    try:
        lessons = parse_schedule(csv_text, group)
    except Exception as e:
        log.exception("parse_schedule failed for %s", group)
        await m.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: <code>{html.escape(str(e))}</code>", parse_mode="HTML")
        return

    if not lessons:
        await m.answer(f"–î–ª—è –≥—Ä—É–ø–ø—ã <b>{html.escape(group)}</b> —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", parse_mode="HTML")
        return

    # –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
    grouped = defaultdict(list)
    for l in lessons:
        grouped[l["day"]].append(l)
    for day in grouped:
        grouped[day].sort(key=lambda r: _start_minutes(r.get("time") or ""))
    days_sorted = sorted(grouped.keys(), key=_day_key)

    # 1) —à–∞–ø–∫–∞
    header = (
        f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã <b>{html.escape(group)}</b>\n"
        f"<i>[–Ω] ‚Äî –Ω–µ—á—ë—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è, [–≤] ‚Äî —á—ë—Ç–Ω–∞—è</i>"
    )
    await m.answer(header, parse_mode="HTML", disable_web_page_preview=True)

    # 2) –ø–æ –¥–Ω—é ‚Äî –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (+ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–µ —Ç–µ–∫—Å—Ç–∞ –¥–Ω—è –Ω–µ –Ω—É–∂–µ–Ω)
    for day in days_sorted:
        title = f"‚Äî <b>{html.escape(day)}</b> ‚Äî"
        blocks = [_format_lesson(r) for r in grouped[day]]
        day_text = title + "\n\n" + "\n\n".join(blocks)
        await m.answer(day_text, parse_mode="HTML", disable_web_page_preview=True)
